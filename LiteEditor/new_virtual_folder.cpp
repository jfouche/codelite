//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// copyright            : (C) 2014 The CodeLite Team
// file name            : new_virtual_folder.cpp
//
// -------------------------------------------------------------------------
// A
//              _____           _      _     _ _
//             /  __ \         | |    | |   (_) |
//             | /  \/ ___   __| | ___| |    _| |_ ___
//             | |    / _ \ / _  |/ _ \ |   | | __/ _ )
//             | \__/\ (_) | (_| |  __/ |___| | ||  __/
//              \____/\___/ \__,_|\___\_____/_|\__\___|
//
//                                                  F i l e
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "new_virtual_folder.h"


// Declare the bitmap loading function
extern void wxCD0C8InitBitmapResources();

static bool bBitmapLoaded = false;


NewVirtualFolderDlgBase::NewVirtualFolderDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCD0C8InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer2);
    
    flexGridSizer10 = new wxFlexGridSizer(  0, 2, 0, 0);
    flexGridSizer10->SetFlexibleDirection( wxBOTH );
    flexGridSizer10->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer10->AddGrowableCol(1);
    
    boxSizer2->Add(flexGridSizer10, 1, wxALL|wxEXPAND, 5);
    
    m_staticText12 = new wxStaticText(this, wxID_ANY, _("Name:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer10->Add(m_staticText12, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    m_textCtrlName->SetFocus();
    
    flexGridSizer10->Add(m_textCtrlName, 0, wxALL|wxEXPAND, 5);
    
    flexGridSizer10->Add(0, 0, 1, wxALL, 5);
    
    m_checkBoxCreateOnDisk = new wxCheckBox(this, wxID_ANY, _("Create the folder on the file system as well"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxCreateOnDisk->SetValue(false);
    
    flexGridSizer10->Add(m_checkBoxCreateOnDisk, 0, wxALL, 5);
    
    flexGridSizer10->Add(0, 0, 1, wxALL, 5);
    
    m_textCtrlPath = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    
    flexGridSizer10->Add(m_textCtrlPath, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    boxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer2->Add(boxSizer4, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_button6 = new wxButton(this, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer4->Add(m_button6, 0, wxALL, 5);
    
    m_button8 = new wxButton(this, wxID_OK, _("&OK"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_button8->SetDefault();
    
    boxSizer4->Add(m_button8, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_textCtrlName->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(NewVirtualFolderDlgBase::OnNameUpdated), NULL, this);
    m_checkBoxCreateOnDisk->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(NewVirtualFolderDlgBase::OnCreateOnFolderChecked), NULL, this);
    m_textCtrlPath->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewVirtualFolderDlgBase::OnCreateOnDiskUI), NULL, this);
    m_button8->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewVirtualFolderDlgBase::OnOkUI), NULL, this);
    
}

NewVirtualFolderDlgBase::~NewVirtualFolderDlgBase()
{
    m_textCtrlName->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(NewVirtualFolderDlgBase::OnNameUpdated), NULL, this);
    m_checkBoxCreateOnDisk->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(NewVirtualFolderDlgBase::OnCreateOnFolderChecked), NULL, this);
    m_textCtrlPath->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewVirtualFolderDlgBase::OnCreateOnDiskUI), NULL, this);
    m_button8->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewVirtualFolderDlgBase::OnOkUI), NULL, this);
    
}
