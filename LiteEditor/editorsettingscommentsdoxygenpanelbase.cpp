//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// copyright            : (C) 2014 The CodeLite Team
// file name            : editorsettingscommentsdoxygenpanelbase.cpp
//
// -------------------------------------------------------------------------
// A
//              _____           _      _     _ _
//             /  __ \         | |    | |   (_) |
//             | /  \/ ___   __| | ___| |    _| |_ ___
//             | |    / _ \ / _  |/ _ \ |   | | __/ _ )
//             | \__/\ (_) | (_| |  __/ |___| | ||  __/
//              \____/\___/ \__,_|\___\_____/_|\__\___|
//
//                                                  F i l e
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "editorsettingscommentsdoxygenpanelbase.h"


// Declare the bitmap loading function
extern void wxCB83BInitBitmapResources();

static bool bBitmapLoaded = false;


EditorSettingsCommentsDoxygenPanelBase::EditorSettingsCommentsDoxygenPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCB83BInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer1);
    
    wxBoxSizer* bSizer2 = new wxBoxSizer(wxVERTICAL);
    
    bSizer1->Add(bSizer2, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxUseSlash2Stars = new wxCheckBox(this, wxID_ANY, _("Use '/**' as doxygen block start (else use '/*!')"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxUseSlash2Stars->SetValue(true);
    
    bSizer2->Add(m_checkBoxUseSlash2Stars, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxUseShtroodel = new wxCheckBox(this, wxID_ANY, _("Use '@' as doxygen keyword prefix"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxUseShtroodel->SetValue(false);
    
    bSizer2->Add(m_checkBoxUseShtroodel, 0, wxALL|wxEXPAND, 5);
    
    m_staticline1 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLI_HORIZONTAL);
    
    bSizer2->Add(m_staticline1, 0, wxALL|wxEXPAND, 5);
    
    m_staticText3 = new wxStaticText(this, wxID_ANY, _("CodeLite contains a built-in doxygen documentation generator which\nadds doxygen comments to your code. Here you can set the prefix \nthat will be placed on top of the dynamic content of the comment:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer2->Add(m_staticText3, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_staticline2 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLI_HORIZONTAL);
    
    bSizer2->Add(m_staticline2, 0, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* fgSizer1 = new wxFlexGridSizer(  2, 2, 0, 0);
    fgSizer1->SetFlexibleDirection( wxBOTH );
    fgSizer1->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer1->AddGrowableCol(1);
    
    bSizer2->Add(fgSizer1, 1, wxEXPAND, 5);
    
    m_staticText4 = new wxStaticText(this, wxID_ANY, _("Class prefix:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText4, 0, wxALL|wxALIGN_RIGHT|wxALIGN_TOP, 5);
    
    m_textCtrlClassPattern = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_MULTILINE);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_textCtrlClassPatternFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_textCtrlClassPatternFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_textCtrlClassPatternFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_textCtrlClassPatternFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_textCtrlClassPattern->SetFont(m_textCtrlClassPatternFont);
    
    fgSizer1->Add(m_textCtrlClassPattern, 1, wxALL|wxEXPAND, 5);
    
    m_staticText5 = new wxStaticText(this, wxID_ANY, _("Function prefix:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText5, 0, wxALL|wxALIGN_RIGHT|wxALIGN_TOP, 5);
    
    m_textCtrlFunctionPattern = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), wxTE_MULTILINE);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_textCtrlFunctionPatternFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_textCtrlFunctionPatternFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_textCtrlFunctionPatternFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_textCtrlFunctionPatternFont.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_textCtrlFunctionPattern->SetFont(m_textCtrlFunctionPatternFont);
    
    fgSizer1->Add(m_textCtrlFunctionPattern, 1, wxALL|wxEXPAND, 5);
    
    m_staticText1 = new wxStaticText(this, wxID_ANY, _("The following macros are available:\n$(CurrentFileName), $(CurrentFilePath),\n$(User), $(Date), $(Name)\n$(CurrentFileFullPath), $(CurrentFileExt),\n$(ProjectName), $(WorkspaceName)"), wxDefaultPosition, wxSize(-1, -1), 0);
    #ifdef __WXMSW__
    // To get the newer version of the font on MSW, we use font wxSYS_DEFAULT_GUI_FONT with family set to wxFONTFAMILY_TELETYPE
    wxFont m_staticText1Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1Font.SetFamily(wxFONTFAMILY_TELETYPE);
    #else
    wxFont m_staticText1Font = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    m_staticText1Font.SetFamily(wxFONTFAMILY_TELETYPE);
    #endif
    m_staticText1->SetFont(m_staticText1Font);
    
    bSizer2->Add(m_staticText1, 0, wxALL|wxEXPAND, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_checkBoxUseShtroodel->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(EditorSettingsCommentsDoxygenPanelBase::OnUseAtPrefix), NULL, this);
    
}

EditorSettingsCommentsDoxygenPanelBase::~EditorSettingsCommentsDoxygenPanelBase()
{
    m_checkBoxUseShtroodel->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(EditorSettingsCommentsDoxygenPanelBase::OnUseAtPrefix), NULL, this);
    
}
