//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: compiler_page.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "compiler_pages.h"


// Declare the bitmap loading function
extern void wxCAD0CInitBitmapResources();

static bool bBitmapLoaded = false;


CompilerPatternsBase::CompilerPatternsBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer14 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer14);
    
    wxBoxSizer* bSizerError = new wxBoxSizer(wxVERTICAL);
    
    bSizer14->Add(bSizerError, 1, wxALL|wxEXPAND, 5);
    
    m_staticText161 = new wxStaticText(this, wxID_ANY, _("Compiler Errors Patterns:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizerError->Add(m_staticText161, 0, wxALL, 5);
    
    wxBoxSizer* bSizer25 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizerError->Add(bSizer25, 1, wxEXPAND, 5);
    
    m_listErrPatterns = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    bSizer25->Add(m_listErrPatterns, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer26 = new wxBoxSizer(wxVERTICAL);
    
    bSizer25->Add(bSizer26, 0, 0, 5);
    
    m_btnAddErrPattern = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_btnAddErrPattern->SetToolTip(_("Add new error pattern"));
    
    bSizer26->Add(m_btnAddErrPattern, 0, wxALL|wxEXPAND, 5);
    
    m_btnDelErrPattern = new wxButton(this, wxID_ANY, _("Delete"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_btnDelErrPattern->SetToolTip(_("Delete the selected error pattern"));
    
    bSizer26->Add(m_btnDelErrPattern, 0, wxALL|wxEXPAND, 5);
    
    m_btnUpdateErrPattern = new wxButton(this, wxID_ANY, _("Edit..."), wxDefaultPosition, wxSize(-1, -1), 0);
    m_btnUpdateErrPattern->SetToolTip(_("Edit the selected error pattern"));
    
    bSizer26->Add(m_btnUpdateErrPattern, 0, wxALL|wxEXPAND, 5);
    
    m_staticline5 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLI_HORIZONTAL);
    
    bSizer14->Add(m_staticline5, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizerWarnings = new wxBoxSizer(wxVERTICAL);
    
    bSizer14->Add(bSizerWarnings, 1, wxALL|wxEXPAND, 5);
    
    m_staticText17 = new wxStaticText(this, wxID_ANY, _("Compiler Warnings Patterns:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizerWarnings->Add(m_staticText17, 0, wxALL, 5);
    
    wxBoxSizer* bSizer251 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizerWarnings->Add(bSizer251, 1, wxEXPAND, 5);
    
    m_listWarnPatterns = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    bSizer251->Add(m_listWarnPatterns, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer261 = new wxBoxSizer(wxVERTICAL);
    
    bSizer251->Add(bSizer261, 0, 0, 5);
    
    m_btnAddWarnPattern = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_btnAddWarnPattern->SetToolTip(_("Add new warning pattern"));
    
    bSizer261->Add(m_btnAddWarnPattern, 0, wxALL|wxEXPAND, 5);
    
    m_btnDelWarnPattern = new wxButton(this, wxID_ANY, _("Delete"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_btnDelWarnPattern->SetToolTip(_("Delete the selected warning pattern"));
    
    bSizer261->Add(m_btnDelWarnPattern, 0, wxALL|wxEXPAND, 5);
    
    m_btnUpdateWarnPattern = new wxButton(this, wxID_ANY, _("Edit..."), wxDefaultPosition, wxSize(-1, -1), 0);
    m_btnUpdateWarnPattern->SetToolTip(_("Edit the selected warning pattern"));
    
    bSizer261->Add(m_btnUpdateWarnPattern, 0, wxALL|wxEXPAND, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_listErrPatterns->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerPatternsBase::OnErrItemActivated), NULL, this);
    m_btnAddErrPattern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnAddErrPattern), NULL, this);
    m_btnDelErrPattern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnDelErrPattern), NULL, this);
    m_btnDelErrPattern->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnErrorPatternSelectedUI), NULL, this);
    m_btnUpdateErrPattern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnUpdateErrPattern), NULL, this);
    m_btnUpdateErrPattern->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnErrorPatternSelectedUI), NULL, this);
    m_listWarnPatterns->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerPatternsBase::OnWarnItemActivated), NULL, this);
    m_btnAddWarnPattern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnAddWarnPattern), NULL, this);
    m_btnDelWarnPattern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnDelWarnPattern), NULL, this);
    m_btnDelWarnPattern->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnWarningPatternSelectedUI), NULL, this);
    m_btnUpdateWarnPattern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnUpdateWarnPattern), NULL, this);
    m_btnUpdateWarnPattern->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnWarningPatternSelectedUI), NULL, this);
    
}

CompilerPatternsBase::~CompilerPatternsBase()
{
    m_listErrPatterns->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerPatternsBase::OnErrItemActivated), NULL, this);
    m_btnAddErrPattern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnAddErrPattern), NULL, this);
    m_btnDelErrPattern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnDelErrPattern), NULL, this);
    m_btnDelErrPattern->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnErrorPatternSelectedUI), NULL, this);
    m_btnUpdateErrPattern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnUpdateErrPattern), NULL, this);
    m_btnUpdateErrPattern->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnErrorPatternSelectedUI), NULL, this);
    m_listWarnPatterns->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerPatternsBase::OnWarnItemActivated), NULL, this);
    m_btnAddWarnPattern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnAddWarnPattern), NULL, this);
    m_btnDelWarnPattern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnDelWarnPattern), NULL, this);
    m_btnDelWarnPattern->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnWarningPatternSelectedUI), NULL, this);
    m_btnUpdateWarnPattern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternsBase::OnBtnUpdateWarnPattern), NULL, this);
    m_btnUpdateWarnPattern->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CompilerPatternsBase::OnWarningPatternSelectedUI), NULL, this);
    
}

CompilerToolsBase::CompilerToolsBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer2);
    
    wxArrayString m_pgMgr92Arr;
    wxUnusedVar(m_pgMgr92Arr);
    wxArrayInt m_pgMgr92IntArr;
    wxUnusedVar(m_pgMgr92IntArr);
    m_pgMgr92 = new wxPropertyGridManager(this, wxID_ANY, wxDefaultPosition, wxSize(300,300), wxPG_DESCRIPTION|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    
    boxSizer2->Add(m_pgMgr92, 1, wxALL|wxEXPAND, 5);
    
    m_pgProp94 = m_pgMgr92->Append(  new wxPropertyCategory( _("Tools") ) );
    m_pgProp94->SetHelpString(wxT(""));
    
    m_pgPropCXX = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("C++ Compiler"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropCXX, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropCXX->SetHelpString(_("The C++ compiler path (plus optional flags). This tool is represented in the Makefile as $(CXX)"));
    
    m_pgPropCC = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("C Compiler"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropCC, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropCC->SetHelpString(_("The C++ compiler path (plus optional flags). This tool is represented in the Makefile as $(CC)"));
    
    m_pgPropAS = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("Assembler Name"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropAS, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropAS->SetHelpString(_("The assembler tool path. This tool is referred in the Makefile as $(AS)"));
    
    m_pgPropLD = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("Linker"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropLD, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropLD->SetHelpString(_("The linker tool. Usually similar to the 'C++ Compiler' tool path"));
    
    m_pgPropSharedObjectLD = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("Shared Object Linker"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropSharedObjectLD, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropSharedObjectLD->SetHelpString(_("The tool to create shared objects"));
    
    m_pgPropAR = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("Archive"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropAR, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropAR->SetHelpString(_("The static archive tool \"ar\". This tool is referred in the Makefile as $(AR)"));
    
    m_pgPropResourceCompiler = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("Resource Compiler"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropResourceCompiler, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropResourceCompiler->SetHelpString(_("The resource compiler. (Windows only)"));
    
    m_pgPropMAKE = m_pgMgr92->AppendIn( m_pgProp94,  new wxFileProperty( _("Make"), wxPG_LABEL, wxT("")) );
    m_pgMgr92->SetPropertyAttribute(m_pgPropMAKE, wxPG_FILE_WILDCARD, wxT(""));
    m_pgPropMAKE->SetHelpString(_("The Make tool. on Windows / MinGW this is usually mingw32-make.exe while on other OSs its simply 'make'"));
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
}

CompilerToolsBase::~CompilerToolsBase()
{
}

CompilerSwitchesBase::CompilerSwitchesBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(mainSizer);
    
    m_staticText8 = new wxStaticText(this, wxID_ANY, _("Double click on an entry to modify it:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    mainSizer->Add(m_staticText8, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_listSwitches = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    mainSizer->Add(m_listSwitches, 1, wxALL|wxEXPAND, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_listSwitches->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerSwitchesBase::OnItemActivated), NULL, this);
    m_listSwitches->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerSwitchesBase::OnItemSelected), NULL, this);
    
}

CompilerSwitchesBase::~CompilerSwitchesBase()
{
    m_listSwitches->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerSwitchesBase::OnItemActivated), NULL, this);
    m_listSwitches->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerSwitchesBase::OnItemSelected), NULL, this);
    
}

CompilerFileTypesBase::CompilerFileTypesBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer10 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer10);
    
    m_staticText23 = new wxStaticText(this, wxID_ANY, _("Double click on an entry to modify it:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer10->Add(m_staticText23, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    wxBoxSizer* bSizer12 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer10->Add(bSizer12, 1, wxALL|wxEXPAND, 5);
    
    m_listCtrlFileTypes = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    bSizer12->Add(m_listCtrlFileTypes, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer111 = new wxBoxSizer(wxVERTICAL);
    
    bSizer12->Add(bSizer111, 0, wxEXPAND, 5);
    
    m_buttonNewFileType = new wxButton(this, wxID_ANY, _("New..."), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonNewFileType->SetDefault();
    
    bSizer111->Add(m_buttonNewFileType, 0, wxALL, 5);
    
    m_buttonDeleteFileType = new wxButton(this, wxID_ANY, _("Delete"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer111->Add(m_buttonDeleteFileType, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_listCtrlFileTypes->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerFileTypesBase::OnFileTypeActivated), NULL, this);
    m_listCtrlFileTypes->Connect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(CompilerFileTypesBase::OnFileTypeDeSelected), NULL, this);
    m_listCtrlFileTypes->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerFileTypesBase::OnFileTypeSelected), NULL, this);
    m_buttonNewFileType->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerFileTypesBase::OnNewFileType), NULL, this);
    m_buttonDeleteFileType->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerFileTypesBase::OnDeleteFileType), NULL, this);
    
}

CompilerFileTypesBase::~CompilerFileTypesBase()
{
    m_listCtrlFileTypes->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerFileTypesBase::OnFileTypeActivated), NULL, this);
    m_listCtrlFileTypes->Disconnect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(CompilerFileTypesBase::OnFileTypeDeSelected), NULL, this);
    m_listCtrlFileTypes->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerFileTypesBase::OnFileTypeSelected), NULL, this);
    m_buttonNewFileType->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerFileTypesBase::OnNewFileType), NULL, this);
    m_buttonDeleteFileType->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerFileTypesBase::OnDeleteFileType), NULL, this);
    
}

CompilerAdvanceBase::CompilerAdvanceBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer11 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer11);
    
    wxBoxSizer* bSizer7 = new wxBoxSizer(wxVERTICAL);
    
    bSizer11->Add(bSizer7, 0, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* fgSizer3 = new wxFlexGridSizer(0, 3, 0, 0);
    fgSizer3->SetFlexibleDirection( wxBOTH );
    fgSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer3->AddGrowableCol(1);
    
    bSizer7->Add(fgSizer3, 0, wxEXPAND, 5);
    
    m_staticText18 = new wxStaticText(this, wxID_ANY, _("Global Paths"), wxDefaultPosition, wxSize(-1, -1), 0);
    wxFont m_staticText18Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText18Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText18->SetFont(m_staticText18Font);
    
    fgSizer3->Add(m_staticText18, 0, wxALL|wxALIGN_RIGHT, 5);
    
    fgSizer3->Add(0, 0, 0, wxALL, 5);
    
    fgSizer3->Add(0, 0, 1, wxALL, 5);
    
    m_staticText141 = new wxStaticText(this, wxID_ANY, _("Include Path:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_staticText141, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlGlobalIncludePath = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_textCtrlGlobalIncludePath->SetToolTip(_("Set here an additional include paths. Each path should be separated with a semi-colon\nNote that usually you don't need to modify this field and it should be left empty"));
    
    fgSizer3->Add(m_textCtrlGlobalIncludePath, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_button67 = new wxButton(this, wxID_ANY, _("Edit..."), wxDefaultPosition, wxSize(-1,-1), 0);
    
    fgSizer3->Add(m_button67, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText16 = new wxStaticText(this, wxID_ANY, _("Libraries Path:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_staticText16, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlGlobalLibPath = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_textCtrlGlobalLibPath->SetToolTip(_("Set here an additional library search paths. Each path should be separated with a semi-colon\nNote that usually you don't need to modify this field and it should be left empty"));
    
    fgSizer3->Add(m_textCtrlGlobalLibPath, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_button69 = new wxButton(this, wxID_ANY, _("Edit..."), wxDefaultPosition, wxSize(-1,-1), 0);
    
    fgSizer3->Add(m_button69, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText19 = new wxStaticText(this, wxID_ANY, _("Misc"), wxDefaultPosition, wxSize(-1, -1), 0);
    wxFont m_staticText19Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText19Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText19->SetFont(m_staticText19Font);
    
    fgSizer3->Add(m_staticText19, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    fgSizer3->Add(0, 0, 0, wxALL, 5);
    
    fgSizer3->Add(0, 0, 1, wxALL, 5);
    
    m_staticText3 = new wxStaticText(this, wxID_ANY, _("Objects extension:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_staticText3, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textObjectExtension = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_textObjectExtension, 1, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    fgSizer3->Add(0, 0, 1, wxALL, 5);
    
    m_staticText24 = new wxStaticText(this, wxID_ANY, _("Depends extension:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_staticText24, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textDependExtension = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_textDependExtension, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    fgSizer3->Add(0, 0, 1, wxALL, 5);
    
    m_staticText25 = new wxStaticText(this, wxID_ANY, _("Preprocessed extension:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_staticText25, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textPreprocessExtension = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer3->Add(m_textPreprocessExtension, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    fgSizer3->Add(0, 0, 0, wxALL, 5);
    
    fgSizer3->Add(0, 0, 1, wxALL, 5);
    
    m_checkBoxGenerateDependenciesFiles = new wxCheckBox(this, wxID_ANY, _("Generate dependencies files (*.o.d)"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxGenerateDependenciesFiles->SetValue(false);
    
    fgSizer3->Add(m_checkBoxGenerateDependenciesFiles, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    fgSizer3->Add(0, 0, 1, wxALL, 5);
    
    fgSizer3->Add(0, 0, 0, wxALL, 5);
    
    m_checkBoxObjectNameSameAsFileName = new wxCheckBox(this, wxID_ANY, _("Object name is same as the file name"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxObjectNameSameAsFileName->SetValue(false);
    m_checkBoxObjectNameSameAsFileName->SetToolTip(_("By default, codelite will prepend the relative directory to the file name to compose an object name (e.g. src/a.cpp will generate object: src_a.o).\nUncheck this option to make the object name exactly as the file name without any prefixes"));
    
    fgSizer3->Add(m_checkBoxObjectNameSameAsFileName, 0, wxALL, 5);
    
    fgSizer3->Add(0, 0, 1, wxALL, 5);
    
    fgSizer3->Add(0, 0, 0, wxALL, 5);
    
    m_checkBoxReadObjectsFromFile = new wxCheckBox(this, wxID_ANY, _("Pass object list to the linker via file"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxReadObjectsFromFile->SetValue(false);
    
    fgSizer3->Add(m_checkBoxReadObjectsFromFile, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_button67->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerAdvanceBase::OnEditIncludePaths), NULL, this);
    m_button69->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerAdvanceBase::OnEditLibraryPaths), NULL, this);
    
}

CompilerAdvanceBase::~CompilerAdvanceBase()
{
    m_button67->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerAdvanceBase::OnEditIncludePaths), NULL, this);
    m_button69->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerAdvanceBase::OnEditLibraryPaths), NULL, this);
    
}

CompilerCompilerOptionsBase::CompilerCompilerOptionsBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer10 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer10);
    
    m_staticText23 = new wxStaticText(this, wxID_ANY, _("Double click on an entry to modify it:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer10->Add(m_staticText23, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer12 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer10->Add(bSizer12, 1, wxEXPAND, 5);
    
    m_listCompilerOptions = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    bSizer12->Add(m_listCompilerOptions, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer111 = new wxBoxSizer(wxVERTICAL);
    
    bSizer12->Add(bSizer111, 0, wxEXPAND, 5);
    
    m_buttonCompilerOption = new wxButton(this, wxID_ANY, _("New..."), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonCompilerOption->SetDefault();
    
    bSizer111->Add(m_buttonCompilerOption, 0, wxALL, 5);
    
    m_buttonDeleteCompilerOption = new wxButton(this, wxID_ANY, _("Delete"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer111->Add(m_buttonDeleteCompilerOption, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_listCompilerOptions->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerCompilerOptionsBase::OnCompilerOptionActivated), NULL, this);
    m_listCompilerOptions->Connect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(CompilerCompilerOptionsBase::OnCompilerOptionDeSelected), NULL, this);
    m_listCompilerOptions->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerCompilerOptionsBase::OnCompilerOptionSelected), NULL, this);
    m_buttonCompilerOption->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerCompilerOptionsBase::OnNewCompilerOption), NULL, this);
    m_buttonDeleteCompilerOption->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerCompilerOptionsBase::OnDeleteCompilerOption), NULL, this);
    
}

CompilerCompilerOptionsBase::~CompilerCompilerOptionsBase()
{
    m_listCompilerOptions->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerCompilerOptionsBase::OnCompilerOptionActivated), NULL, this);
    m_listCompilerOptions->Disconnect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(CompilerCompilerOptionsBase::OnCompilerOptionDeSelected), NULL, this);
    m_listCompilerOptions->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerCompilerOptionsBase::OnCompilerOptionSelected), NULL, this);
    m_buttonCompilerOption->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerCompilerOptionsBase::OnNewCompilerOption), NULL, this);
    m_buttonDeleteCompilerOption->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerCompilerOptionsBase::OnDeleteCompilerOption), NULL, this);
    
}

CompilerLinkerOptionsBase::CompilerLinkerOptionsBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer10 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer10);
    
    m_staticText23 = new wxStaticText(this, wxID_ANY, _("Double click on an entry to modify it:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer10->Add(m_staticText23, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer12 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer10->Add(bSizer12, 1, wxEXPAND, 5);
    
    m_listLinkerOptions = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    bSizer12->Add(m_listLinkerOptions, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer111 = new wxBoxSizer(wxVERTICAL);
    
    bSizer12->Add(bSizer111, 0, wxEXPAND, 5);
    
    m_buttonLinkerOption = new wxButton(this, wxID_ANY, _("New..."), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonLinkerOption->SetDefault();
    
    bSizer111->Add(m_buttonLinkerOption, 0, wxALL, 5);
    
    m_buttonDeleteLinkerOption = new wxButton(this, wxID_ANY, _("Delete"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer111->Add(m_buttonDeleteLinkerOption, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_listLinkerOptions->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerLinkerOptionsBase::OnLinkerOptionActivated), NULL, this);
    m_listLinkerOptions->Connect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(CompilerLinkerOptionsBase::OnLinkerOptionDeSelected), NULL, this);
    m_listLinkerOptions->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerLinkerOptionsBase::OnLinkerOptionSelected), NULL, this);
    m_buttonLinkerOption->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerLinkerOptionsBase::OnNewLinkerOption), NULL, this);
    m_buttonDeleteLinkerOption->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerLinkerOptionsBase::OnDeleteLinkerOption), NULL, this);
    
}

CompilerLinkerOptionsBase::~CompilerLinkerOptionsBase()
{
    m_listLinkerOptions->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CompilerLinkerOptionsBase::OnLinkerOptionActivated), NULL, this);
    m_listLinkerOptions->Disconnect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(CompilerLinkerOptionsBase::OnLinkerOptionDeSelected), NULL, this);
    m_listLinkerOptions->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CompilerLinkerOptionsBase::OnLinkerOptionSelected), NULL, this);
    m_buttonLinkerOption->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerLinkerOptionsBase::OnNewLinkerOption), NULL, this);
    m_buttonDeleteLinkerOption->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerLinkerOptionsBase::OnDeleteLinkerOption), NULL, this);
    
}

CompilerOptionDlgBase::CompilerOptionDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer23 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer23);
    
    wxFlexGridSizer* fgSizer7 = new wxFlexGridSizer(0, 2, 0, 0);
    fgSizer7->SetFlexibleDirection( wxBOTH );
    fgSizer7->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer7->AddGrowableCol(1);
    
    bSizer23->Add(fgSizer7, 0, wxALL|wxEXPAND, 5);
    
    m_staticText26 = new wxStaticText(this, wxID_ANY, _("Switch:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer7->Add(m_staticText26, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrl18 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer7->Add(m_textCtrl18, 0, wxALL|wxEXPAND, 5);
    
    m_staticText27 = new wxStaticText(this, wxID_ANY, _("Help:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer7->Add(m_staticText27, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrl19 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer7->Add(m_textCtrl19, 0, wxALL|wxEXPAND, 5);
    
    bSizer23->Add(0, 0, 1, wxEXPAND, 5);
    
    m_staticline4 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLI_HORIZONTAL);
    
    bSizer23->Add(m_staticline4, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer24 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer23->Add(bSizer24, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_buttonOK = new wxButton(this, wxID_OK, _("&OK"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOK->SetDefault();
    
    bSizer24->Add(m_buttonOK, 0, wxALL, 5);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer24->Add(m_buttonCancel, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre();
}

CompilerOptionDlgBase::~CompilerOptionDlgBase()
{
}

CompilerPatternDlgBase::CompilerPatternDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizerError = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizerError);
    
    wxFlexGridSizer* fgSizer41 = new wxFlexGridSizer(0, 2, 0, 0);
    fgSizer41->SetFlexibleDirection( wxBOTH );
    fgSizer41->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer41->AddGrowableCol(1);
    
    bSizerError->Add(fgSizer41, 0, wxALL|wxEXPAND, 5);
    
    m_staticText5 = new wxStaticText(this, wxID_ANY, _("Regex Pattern:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer41->Add(m_staticText5, 0, wxLEFT|wxRIGHT|wxTOP|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textPattern = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer41->Add(m_textPattern, 1, wxALL|wxEXPAND, 5);
    
    m_staticText6 = new wxStaticText(this, wxID_ANY, _("File Index in Pattern:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer41->Add(m_staticText6, 0, wxLEFT|wxRIGHT|wxTOP|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textFileIndex = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer41->Add(m_textFileIndex, 0, wxALL|wxEXPAND, 5);
    
    m_staticText7 = new wxStaticText(this, wxID_ANY, _("Line Number in Pattern:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer41->Add(m_staticText7, 0, wxLEFT|wxRIGHT|wxTOP|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textLineNumber = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer41->Add(m_textLineNumber, 0, wxALL|wxEXPAND, 5);
    
    bSizerError->Add(0, 0, 1, wxEXPAND, 5);
    
    m_staticline5 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxLI_HORIZONTAL);
    
    bSizerError->Add(m_staticline5, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* bSizer24 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizerError->Add(bSizer24, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOK->SetDefault();
    
    bSizer24->Add(m_buttonOK, 0, wxALL, 5);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, _("cancel"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer24->Add(m_buttonCancel, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre();
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternDlgBase::OnSubmit), NULL, this);
    
}

CompilerPatternDlgBase::~CompilerPatternDlgBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CompilerPatternDlgBase::OnSubmit), NULL, this);
    
}

NewCompilerDlgBase::NewCompilerDlgBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCAD0CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer73 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer73);
    
    wxFlexGridSizer* flexGridSizer82 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer82->SetFlexibleDirection( wxBOTH );
    flexGridSizer82->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer82->AddGrowableCol(1);
    
    boxSizer73->Add(flexGridSizer82, 1, wxALL|wxEXPAND, 5);
    
    m_staticText84 = new wxStaticText(this, wxID_ANY, _("New compiler name:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer82->Add(m_staticText84, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlCompilerName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    m_textCtrlCompilerName->SetFocus();
    
    flexGridSizer82->Add(m_textCtrlCompilerName, 0, wxALL|wxEXPAND, 5);
    
    m_staticText88 = new wxStaticText(this, wxID_ANY, _("Copy settings from:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer82->Add(m_staticText88, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceCompilersArr;
    m_choiceCompilers = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_choiceCompilersArr, 0);
    
    flexGridSizer82->Add(m_choiceCompilers, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_stdBtnSizer75 = new wxStdDialogButtonSizer();
    
    boxSizer73->Add(m_stdBtnSizer75, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer75->AddButton(m_buttonCancel);
    
    m_buttonOK = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOK->SetDefault();
    m_stdBtnSizer75->AddButton(m_buttonOK);
    m_stdBtnSizer75->Realize();
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_buttonOK->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewCompilerDlgBase::OnOkUI), NULL, this);
    
}

NewCompilerDlgBase::~NewCompilerDlgBase()
{
    m_buttonOK->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(NewCompilerDlgBase::OnOkUI), NULL, this);
    
}
