//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// copyright            : (C) 2014 The CodeLite Team
// file name            : buildsettingstabbase.cpp
//
// -------------------------------------------------------------------------
// A
//              _____           _      _     _ _
//             /  __ \         | |    | |   (_) |
//             | /  \/ ___   __| | ___| |    _| |_ ___
//             | |    / _ \ / _  |/ _ \ |   | | __/ _ )
//             | \__/\ (_) | (_| |  __/ |___| | ||  __/
//              \____/\___/ \__,_|\___\_____/_|\__\___|
//
//                                                  F i l e
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "buildsettingstabbase.h"


// Declare the bitmap loading function
extern void wxCraftertNJGa9InitBitmapResources();

static bool bBitmapLoaded = false;


BuildTabSettingsBase::BuildTabSettingsBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCraftertNJGa9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer1);
    
    wxFlexGridSizer* fgSizer1 = new wxFlexGridSizer(  3, 3, 0, 0);
    fgSizer1->SetFlexibleDirection( wxBOTH );
    fgSizer1->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer1->AddGrowableCol(1);
    fgSizer1->AddGrowableCol(2);
    
    bSizer1->Add(fgSizer1, 0, wxALL|wxEXPAND, 5);
    
    m_staticText3 = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText3, 0, wxALL, 5);
    
    m_staticText5 = new wxStaticText(this, wxID_ANY, _("Foreground colour:"), wxDefaultPosition, wxSize(-1, -1), 0);
    wxFont m_staticText5Font(10, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Sans"));
    m_staticText5->SetFont(m_staticText5Font);
    
    fgSizer1->Add(m_staticText5, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_staticText6 = new wxStaticText(this, wxID_ANY, _("Font weight:"), wxDefaultPosition, wxSize(-1, -1), 0);
    wxFont m_staticText6Font(10, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Sans"));
    m_staticText6->SetFont(m_staticText6Font);
    
    fgSizer1->Add(m_staticText6, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_staticText1 = new wxStaticText(this, wxID_ANY, _("Compiler errors colour:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText1, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_colourPickerErrorFg = new wxColourPickerCtrl(this, wxID_ANY, *wxBLACK, wxDefaultPosition, wxSize(-1, -1), wxCLRP_DEFAULT_STYLE);
    
    fgSizer1->Add(m_colourPickerErrorFg, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxBoldErrFont = new wxCheckBox(this, wxID_ANY, _("Bold"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxBoldErrFont->SetValue(true);
    
    fgSizer1->Add(m_checkBoxBoldErrFont, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticText2 = new wxStaticText(this, wxID_ANY, _("Compiler warnings colour:"), wxDefaultPosition, wxSize(-1, -1), 0);
    wxFont m_staticText2Font(10, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Sans"));
    m_staticText2->SetFont(m_staticText2Font);
    
    fgSizer1->Add(m_staticText2, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_colourPickerWarningsFg = new wxColourPickerCtrl(this, wxID_ANY, *wxBLACK, wxDefaultPosition, wxSize(-1, -1), wxCLRP_DEFAULT_STYLE);
    
    fgSizer1->Add(m_colourPickerWarningsFg, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxBoldWarnFont = new wxCheckBox(this, wxID_ANY, _("Bold"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxBoldWarnFont->SetValue(false);
    
    fgSizer1->Add(m_checkBoxBoldWarnFont, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxStaticBoxSizer* sbSizer2 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("General:")), wxVERTICAL);
    
    bSizer1->Add(sbSizer2, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxSkipWarnings = new wxCheckBox(this, wxID_ANY, _("When using the menu to jump to errors, skip warnings"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxSkipWarnings->SetValue(false);
    
    sbSizer2->Add(m_checkBoxSkipWarnings, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxAutoHide = new wxCheckBox(this, wxID_ANY, _("Automatically hide the build pane when there are neither errors nor warnings"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxAutoHide->SetValue(false);
    
    sbSizer2->Add(m_checkBoxAutoHide, 0, wxALL|wxEXPAND, 5);
    
    wxArrayString m_radioBuildPaneScrollDestinationArr;
    m_radioBuildPaneScrollDestinationArr.Add(wxT("The first error"));
    m_radioBuildPaneScrollDestinationArr.Add(wxT("The first warning or error"));
    m_radioBuildPaneScrollDestinationArr.Add(wxT("The end"));
    m_radioBuildPaneScrollDestination = new wxRadioBox(this, wxID_ANY, _("After build finishes, if showing the build pane scroll to:"), wxDefaultPosition, wxSize(-1, -1), m_radioBuildPaneScrollDestinationArr, 1, wxRA_SPECIFY_ROWS);
    m_radioBuildPaneScrollDestination->SetSelection(0);
    
    sbSizer2->Add(m_radioBuildPaneScrollDestination, 0, wxALL|wxEXPAND, 5);
    
    wxArrayString m_radioBoxShowBuildTabArr;
    m_radioBoxShowBuildTabArr.Add(wxT("When build starts"));
    m_radioBoxShowBuildTabArr.Add(wxT("When build ends"));
    m_radioBoxShowBuildTabArr.Add(wxT("Don't automatically show"));
    m_radioBoxShowBuildTab = new wxRadioBox(this, wxID_ANY, _("Show build pane:"), wxDefaultPosition, wxSize(-1, -1), m_radioBoxShowBuildTabArr, 1, wxRA_SPECIFY_COLS);
    m_radioBoxShowBuildTab->SetSelection(0);
    
    bSizer1->Add(m_radioBoxShowBuildTab, 0, wxALL|wxEXPAND, 5);
    
    wxStaticBoxSizer* sbSizer1 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Errors / warnings markers:")), wxVERTICAL);
    
    bSizer1->Add(sbSizer1, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxDisplayMarkers = new wxCheckBox(this, wxID_ANY, _("Compiler errors / warnings marked with bookmarks"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxDisplayMarkers->SetValue(false);
    
    sbSizer1->Add(m_checkBoxDisplayMarkers, 0, wxALL, 5);
    
    m_checkBoxDisplayAnnotations = new wxCheckBox(this, wxID_ANY, _("Compiler errors / warnings displayed inline"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_checkBoxDisplayAnnotations->SetValue(false);
    m_checkBoxDisplayAnnotations->SetToolTip(_("If checked, any errors or warnings will be displayed in the editor alongside the failing code."));
    
    sbSizer1->Add(m_checkBoxDisplayAnnotations, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
}

BuildTabSettingsBase::~BuildTabSettingsBase()
{
}
