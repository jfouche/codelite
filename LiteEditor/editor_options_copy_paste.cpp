//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// copyright            : (C) 2014 The CodeLite Team
// file name            : editor_options_copy_paste.cpp
//
// -------------------------------------------------------------------------
// A
//              _____           _      _     _ _
//             /  __ \         | |    | |   (_) |
//             | /  \/ ___   __| | ___| |    _| |_ ___
//             | |    / _ \ / _  |/ _ \ |   | | __/ _ )
//             | \__/\ (_) | (_| |  __/ |___| | ||  __/
//              \____/\___/ \__,_|\___\_____/_|\__\___|
//
//                                                  F i l e
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "editor_options_copy_paste.h"


// Declare the bitmap loading function
extern void wxCA7InitBitmapResources();

static bool bBitmapLoaded = false;


EditorOptionsCopyPasteBase::EditorOptionsCopyPasteBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCA7InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer2);
    
    wxArrayString m_radioBoxCopyOptionsArr;
    m_radioBoxCopyOptionsArr.Add(wxT("Copy / Cut the caret line to the clipboard"));
    m_radioBoxCopyOptionsArr.Add(wxT("Copy / Cut the caret line to the clipboard only when the caret line is not empty"));
    m_radioBoxCopyOptionsArr.Add(wxT("Do nothing"));
    m_radioBoxCopyOptions = new wxRadioBox(this, wxID_ANY, _("What to copy/cut when there is no selection:"), wxDefaultPosition, wxSize(-1,-1), m_radioBoxCopyOptionsArr, 1, wxRA_SPECIFY_COLS);
    m_radioBoxCopyOptions->SetSelection(0);
    
    boxSizer2->Add(m_radioBoxCopyOptions, 0, wxALL|wxEXPAND, 5);
    
    wxStaticBoxSizer* staticBoxSizer12 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Multiple selections && Caret:")), wxVERTICAL);
    
    boxSizer2->Add(staticBoxSizer12, 0, wxALL|wxEXPAND, 5);
    
    m_checkBoxDisableMultiSelection = new wxCheckBox(this, wxID_ANY, _("Disable multiple selection"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxDisableMultiSelection->SetValue(false);
    m_checkBoxDisableMultiSelection->SetToolTip(_("When multiple selection is disabled, it is not possible to select multiple ranges by holding down the Ctrl key while dragging with the mouse."));
    
    staticBoxSizer12->Add(m_checkBoxDisableMultiSelection, 0, wxALL, 5);
    
    m_checkBoxDisableMultiPaste = new wxCheckBox(this, wxID_ANY, _("Disable multi caret paste"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxDisableMultiPaste->SetValue(false);
    m_checkBoxDisableMultiPaste->SetToolTip(_("When pasting into multiple selections, the pasted text can go into just the main selection or into each selection"));
    
    staticBoxSizer12->Add(m_checkBoxDisableMultiPaste, 0, wxALL, 5);
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
}

EditorOptionsCopyPasteBase::~EditorOptionsCopyPasteBase()
{
}
