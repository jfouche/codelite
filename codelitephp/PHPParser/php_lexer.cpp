#define yy_create_buffer php__create_buffer
#define yy_delete_buffer php__delete_buffer
#define yy_scan_buffer php__scan_buffer
#define yy_scan_string php__scan_string
#define yy_scan_bytes php__scan_bytes
#define yy_flex_debug php__flex_debug
#define yy_init_buffer php__init_buffer
#define yy_flush_buffer php__flush_buffer
#define yy_load_buffer_state php__load_buffer_state
#define yy_switch_to_buffer php__switch_to_buffer
#define yyin php_in
#define yyleng php_leng
#define yylex php_lex
#define yyout php_out
#define yyrestart php_restart
#define yytext php_text
#define yylineno php_lineno
#define yywrap php_wrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 148
#define YY_END_OF_BUFFER 149
static yyconst short int yy_acclist[674] =
    {   0,
      149,    5,  148,  148,    5,  148,  131,  148,    6,  131,
      148,    7,  148,    8,  131,  148,  131,  148,  130,  131,
      148,  124,  131,  148,  131,  148,  131,  148,  131,  148,
      129,  131,  148,  131,  148,  131,  148,  131,  148,  131,
      148,  131,  148,  131,  148,   12,  131,  148,   11,  131,
      148,  131,  148,  131,  148,  131,  148,  131,  148,  131,
      148,   55,  131,  148,  131,  148,  126,  131,  148,  126,
      131,  148,  126,  131,  148,  126,  131,  148,  126,  131,
      148,  126,  131,  148,  126,  131,  148,  126,  131,  148,
      126,  131,  148,  126,  131,  148,  126,  131,  148,  126,

      131,  148,  126,  131,  148,  126,  131,  148,  126,  131,
      148,  126,  131,  148,  126,  131,  148,  126,  131,  148,
      126,  131,  148,  126,  131,  148,  126,  131,  148,  126,
      131,  148,  131,  148,  144,  148,  143,  148,  144,  148,
      147,  148,  146,  148,  147,  148,  147,  148,  142,  148,
      141,  148,  142,  148,  137,  139,  148,  136,  148,  138,
      139,  148,  139,  148,  133,  135,  148,  132,  148,  134,
      135,  148,  135,  148,    4,    6,    7,    8,   87,    9,
       95,  128,  102,   98,   92,   82,   90,   83,   91,   53,
       14,   94,  125,  124,   93,   14,   12,   12,   12,   11,

       11,   11,   54,  106,   88,   87,   86,   78,   89,  107,
      127,  100,  126,  126,  126,  126,  126,   38,  126,  126,
      126,  126,  126,  126,  126,   30,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,   24,  126,
      126,  126,  126,  126,  126,  126,  103,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,   99,  101,  143,  146,  145,  140,  137,  137,  133,
      133,    2,   85,    9,  128,   14,   14,   12,   13,   11,
       96,   84,   97,  127,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  104,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,   17,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   31,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,   56,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,   21,  126,
      126,   65,  126,   58,  126,  126,  105,  126,  126,  137,
      137,  133,  133,   14,   13,   13,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,   41,
      126,  126,  126,  126,  126,  126,  126,  126,  126,   46,
      126,   27,  126,  126,  126,  126,  126,  126,  126,   59,
      126,   16,  126,  126,  126,  126,  126,  126,   45,  126,

      126,  126,  126,  126,  126,   79,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,    3,  117,   13,   10,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   80,  126,   43,  126,  126,
       22,  126,   48,  126,   57,  126,   19,  126,  126,  126,
      126,  126,  126,   69,  126,  126,  126,   26,  126,  126,
      126,  126,   73,  126,  126,  126,  126,  126,  126,  126,
      126,  126,   68,  126,  126,   47,  126,  126,  126,  126,
      126,  126,  126,  126,   23,  126,   50,  126,   77,  126,
       28,  126,  116,  126,  122,  118,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
       15,  126,   25,  126,  126,   32,  126,  126,  126,  126,
      126,  126,   67,  126,  126,  126,  126,  126,  126,  126,
      126,  126,   76,  126,  126,   20,  126,   70,  126,   39,
      126,  120,  123,  126,  114,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,   35,  126,   42,  126,
      126,  126,  126,  126,   51,  126,   33,  126,  126,  126,
       60,  126,  126,  126,  126,  126,   74,  126,  126,   62,
      126,  119,  121,  126,  113,  126,  126,  126,  112,  126,
      126,  126,  126,   71,  126,   81,  126,   44,  126,  126,

      126,  126,   29,  126,   18,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  108,  126,  126,  126,  126,  126,
      109,  126,  126,  126,   40,  126,  126,  126,  126,   66,
      126,   49,  126,   64,  126,   75,  126,  126,  126,  126,
      111,  126,  126,   36,  126,   34,  126,   52,  126,  126,
       37,  126,  126,  126,  126,  126,  126,  126,  110,  126,
      126,  126,   61,  126,   63,  126,  126,  115,  126,  126,
       72,  126,    1
    } ;

static yyconst short int yy_accept[640] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    4,    5,    7,    9,
       12,   14,   17,   19,   22,   25,   27,   29,   31,   34,
       36,   38,   40,   42,   44,   46,   49,   52,   54,   56,
       58,   60,   62,   65,   67,   70,   73,   76,   79,   82,
       85,   88,   91,   94,   97,  100,  103,  106,  109,  112,
      115,  118,  121,  124,  127,  130,  133,  135,  137,  139,
      141,  143,  145,  147,  149,  151,  153,  155,  158,  160,
      163,  165,  168,  170,  173,  175,  176,  176,  177,  178,
      178,  179,  180,  181,  182,  183,  184,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  186,  187,
      188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
      198,  198,  198,  199,  200,  200,  201,  202,  203,  204,
      204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  220,  220,  221,  222,  223,
      224,  225,  226,  228,  229,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  241,  242,  243,  244,  245,
      246,  247,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  267,  267,  267,  268,  269,  270,  270,  271,  272,

      272,  273,  273,  273,  274,  275,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  277,
      277,  278,  279,  280,  281,  281,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
      296,  297,  297,  298,  299,  300,  301,  302,  303,  304,
      305,  306,  308,  309,  310,  311,  312,  313,  314,  315,
      316,  318,  319,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  330,  331,  332,  333,  334,  335,  336,  337,
      338,  339,  341,  342,  344,  346,  347,  349,  350,  351,
      352,  353,  354,  354,  354,  354,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  355,  356,  357,  357,
      357,  357,  357,  357,  358,  359,  360,  361,  362,  363,
      364,  365,  366,  367,  368,  369,  370,  372,  373,  374,
      375,  376,  377,  378,  379,  380,  382,  384,  385,  386,
      387,  388,  389,  390,  392,  394,  395,  396,  397,  398,
      399,  401,  402,  403,  404,  405,  406,  408,  409,  410,
      411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  423,  423,  423,  423,  423,  423,  423,  423,
      424,  424,  424,  424,  424,  424,  425,  425,  425,  425,
      426,  426,  426,  427,  428,  429,  430,  431,  432,  433,

      434,  435,  436,  438,  440,  441,  443,  445,  447,  449,
      450,  451,  452,  453,  454,  456,  457,  458,  460,  461,
      462,  463,  465,  466,  467,  468,  469,  470,  471,  472,
      473,  475,  476,  478,  479,  480,  481,  482,  483,  484,
      485,  487,  489,  491,  493,  495,  495,  495,  495,  495,
      496,  496,  496,  496,  496,  496,  497,  497,  497,  497,
      497,  497,  497,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507,  508,  509,  510,  511,  513,  515,  516,
      518,  519,  520,  521,  522,  523,  525,  526,  527,  528,
      529,  530,  531,  532,  533,  535,  536,  538,  540,  542,

      542,  542,  543,  543,  543,  543,  543,  543,  544,  544,
      545,  547,  548,  549,  550,  551,  552,  553,  554,  555,
      556,  557,  559,  561,  562,  563,  564,  565,  567,  569,
      570,  571,  573,  574,  575,  576,  577,  579,  580,  582,
      582,  582,  583,  583,  583,  583,  584,  584,  585,  587,
      588,  589,  591,  592,  593,  594,  596,  598,  600,  601,
      602,  603,  605,  607,  608,  609,  610,  611,  612,  613,
      614,  615,  615,  615,  617,  618,  619,  620,  621,  623,
      624,  625,  627,  628,  629,  630,  632,  634,  636,  638,
      639,  639,  640,  641,  643,  644,  646,  648,  650,  651,

      653,  654,  654,  655,  656,  657,  658,  659,  659,  661,
      662,  663,  665,  667,  667,  668,  670,  670,  671,  671,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  674,  674
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,    1,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
        1,   31,    1,   32,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,    1,   60,    1,    1,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    2,    3,    1,    1,    3,    2,    1,    4,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        1,    6,    6,    7,    1,    8,    1,    1,    1,    9,
        9,    1,   10,   11,   11,   12,   12,   12,   11,   10,
       10,   10,   10,   10,   10,   10,   13,   10,   10,   10,
       13,   10,   13,   10,   13,   10,   13,   10,   10,    1
    } ;

static yyconst short int yy_base[660] =
    {   0,
        0,    1,   28,    0,    2,    3,    4,    8,  993,   86,
       87,  143,  144,  145,  995,  997,  997,   61,  997,   13,
      997,   95,  966,  997,  997,    0,   64,   81,  997,  175,
      965,   77,   87,  127,   86,  140,  145,  967,   83,  125,
      128,  962,  997,  962,  956,  137,  144,  153,  154,  175,
      165,  125,    0,  189,  946,  166,  936,  152,  948,  152,
      140,  114,  951,  943,  935,  940,  158,  997,  997,  978,
      997,  997,  977,  958,  997,  997,  228,  997,  997,  997,
      193,  997,  997,  997,  202,  209,  942,  240,  997,  258,
      264,  949,    0,  997,   20,  997,  997,    0,  925,  191,

      927,  929,  926,  937,  933,  917,  922,  997,  997,  997,
      997,  997,  997,  250,  997,  997,  997,  997,  253,  258,
      263,  233,  914,  922,    0,  282,  912,  920,  997,  912,
      152,  997,  997,  935,  997,  997,  934,  958,  997,    0,
      272,  908,  922,  907,    0,  930,  918,  262,  245,  908,
      258,  916,    0,  912,  900,  902,  913,  915,  196,  901,
      896,  899,  897,  891,    0,  894,  280,  890,  889,  894,
      883,    0,  242,  903,  271,  903,  894,  884,  265,  882,
      895,  881,  889,  879,  891,  997,  997,  997,  997,  997,
      902,  924,  323,  997,  997,  308,    0,  997,  312,    0,

      997,  885,  874,  997,    0,  997,  921,  872,  875,  873,
      866,  871,  865,  874,  882,  864,  862,  319,  997,  322,
      328,  997,   63,  997,  877,  346,  997,  997,  997,  997,
      867,  869,  268,  876,  867,  870,  873,  855,  852,    0,
      870,  876,  868,  856,  862,  863,  846,  850,  287,  851,
      206,    0,  847,  856,  840,  319,  847,  838,  852,  855,
      850,  851,  851,  837,  839,  838,  829,  843,  842,  826,
      840,    0,  307,  824,  831,  821,  820,  820,  819,  823,
      828,    0,  831,    0,    0,  823,    0,  822,  341,    0,
      343,    0,  817,  823,  830,  829,  817,  826,  826,  367,

      821,  813,  815,  818,  354,  357,  801,  809,  802,  380,
        0,    0,  382,  818,  800,  805,  802,  803,  800,  793,
      799,  810,  792,  784,  797,  806,    0,  798,  786,  799,
      783,  793,  800,  779,  785,    0,  789,  772,  791,  780,
      788,  770,  784,    0,    0,  777,  778,  788,  768,  786,
        0,  781,  764,  334,  766,  763,    0,  763,  761,  779,
      774,  769,  768,  758,  766,  771,  750,  752,  751,  765,
      765,  997,  752,  742,  748,  384,  753,  744,  388,  997,
      756,  759,  390,  747,  740,  997,  750,  782,  776,  997,
      786,  395,  736,  754,  748,  749,  731,  745,  741,  743,

      738,  745,    0,    0,  743,    0,    0,    0,    0,  730,
      725,  730,  736,  734,    0,  736,  720,    0,  728,  727,
      731,    0,  731,  724,  720,  718,  726,  715,  727,  721,
        0,  710,    0,  705,  721,  720,  704,  707,  717,  711,
        0,    0,    0,    0,    0,  698,  401,  692,  405,  997,
      715,  710,  709,  693,  407,  997,  705,  408,  695,  410,
      734,  728,  689,  707,  706,  685,  704,  703,  687,  682,
      680,  696,  686,  676,  691,  675,    0,    0,  682,  688,
      672,  679,  671,  681,  669,    0,  678,  670,  671,  667,
      664,  663,  656,  640,    0,  641,    0,    0,    0,  418,

      424,  997,  425,  631,  626,  426,  427,  997,  623,  640,
        0,  636,  626,  631,  629,  624,  611,  622,  601,  615,
      608,    0,    0,  611,  607,  603,  599,    0,    0,  589,
      584,  596,  589,  578,  582,  578,    0,  575,  574,  428,
      437,  997,  443,  444,  445,  997,  447,  573,    0,  472,
      471,    0,  485,  483,  483,    0,    0,    0,  464,  478,
      472,    0,    0,  458,  462,  461,  469,  469,  468,  468,
      456,  469,  455,    0,  454,  454,  466,  462,    0,  459,
      455,    0,  443,  447,  453,    0,    0,    0,    0,  444,
      441,  454,  436,    0,  445,    0,    0,    0,  446,    0,

      442,  427,  425,  414,  422,  410,  400,  383,    0,  391,
      386,    0,    0,  384,  373,    0,  359,  342,  346,    0,
      461,  462,  463,  472,  321,  310,  316,  306,  287,  251,
      204,  144,  464,   15,    8,  473,  997,  997,  521,  534,
      547,  560,  573,  586,  590,  598,  609,  619,  629,  637,
      645,  652,  659,  670,  674,  678,  689,  699,  708
    } ;

static yyconst short int yy_def[660] =
    {   0,
      639,  639,  638,    3,  640,  640,  641,  641,  642,  642,
      643,  643,  644,  644,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  645,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  647,  638,  638,  638,
      648,  638,  638,  638,  649,  638,  638,  638,  638,  638,
      638,  638,  650,  638,  638,  638,  638,   30,  638,  638,

      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  651,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  646,
      646,  646,  646,  646,  646,  638,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  638,  638,  638,  638,  638,
      638,  638,  647,  638,  638,  638,  652,  638,  638,  653,

      638,  638,  638,  638,  650,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  651,  638,  638,  654,  638,  638,  638,  638,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  638,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  638,  652,
      638,  653,  638,  638,  638,  638,  638,  638,  638,  638,

      638,  638,  638,  638,  638,  638,  638,  638,  638,  654,
      655,  656,  657,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  658,  659,  638,
      638,  657,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      658,  659,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  638,

      638,  638,  638,  638,  638,  638,  638,  638,  638,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  638,
      638,  638,  638,  638,  638,  638,  638,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  638,  638,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      638,  646,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  638,  646,  646,  646,  646,  646,  638,  646,  646,
      646,  646,  646,  638,  646,  646,  638,  646,  638,  646,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,    0,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638
    } ;

static yyconst short int yy_nxt[1058] =
    {   0,
      638,  638,   17,   17,   69,   69,   72,   70,   70,   73,
       72,  638,  638,   73,   88,   89,   90,   90,   90,   88,
       74,  633,  206,  633,   74,  207,   18,   18,   19,   20,
       21,   22,   22,   22,   20,   23,   24,   25,   26,   27,
       28,   29,   30,   19,   31,   32,   33,   34,   35,   36,
       37,   37,   38,   19,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       53,   53,   55,   53,   56,   57,   58,   53,   59,   60,
       61,   62,   63,   64,   65,   66,   53,   67,   76,   79,
       86,   94,   95,   96,  109,   80,   90,   89,   91,   91,

       91,   90,  116,  130,  110,  111,  117,  307,   97,  131,
      132,  133,   87,  118,  112,  113,  308,   81,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   79,   83,   83,  114,  114,
      114,   80,  134,  135,  115,  136,  137,   84,   84,  119,
      180,  120,  120,  121,  119,  181,  126,  126,  126,  163,
      146,  142,  164,   81,   85,   85,   98,  122,  226,  227,
      178,   98,  122,  143,  123,  186,  148,  144,  145,  127,
      179,  151,  635,  124,  147,  152,  125,  149,  128,  170,

      150,  153,  173,  171,  176,  174,  160,  177,   99,  100,
      154,  101,  161,  102,  196,  196,  103,  187,  162,  155,
      156,  157,  104,  199,  199,  105,  106,  165,  107,  158,
      191,  159,  209,  192,  166,  167,  201,  258,  210,  334,
      168,   88,   89,   90,   90,   90,   88,  335,  259,  197,
      220,  220,  634,  194,  221,  221,  221,  202,  200,   90,
       89,   90,   90,   90,   90,   90,   89,   91,   91,   91,
       90,  114,  114,  114,  114,  114,  114,  119,  247,  120,
      120,  121,  119,  273,  121,  121,  121,  218,  219,  274,
      218,  219,  248,  250,  219,  122,  251,  219,  281,  633,

      122,  119,  123,  126,  126,  126,  244,  231,  232,  316,
      233,  124,  234,  245,  246,  266,  235,  236,  237,  122,
      276,  317,  282,  277,  238,  191,  127,  632,  192,  289,
      289,  267,  268,  291,  291,  128,  305,  305,  331,  332,
      306,  306,  306,  221,  221,  221,  631,  310,  194,  221,
      221,  221,  310,  359,  311,  339,  630,  340,  629,  312,
      341,  360,  195,  195,  198,  198,  219,  428,  379,  628,
      342,  429,  219,  379,  343,  306,  306,  306,  306,  306,
      306,  310,  380,  621,  390,  449,  310,  391,  311,  379,
      449,  455,  620,  312,  379,  219,  455,  390,  619,  450,

      391,  219,  501,  380,  381,  456,  449,  501,  455,  507,
      618,  449,  390,  455,  507,  391,  502,  617,  616,  540,
      450,  451,  456,  508,  540,  501,  541,  545,  507,  540,
      501,  541,  545,  507,  540,  615,  614,  613,  541,  502,
      542,  546,  508,  541,  449,  379,  545,  612,  573,  449,
      379,  545,  542,  573,  611,  610,  573,  609,  450,  380,
      546,  573,  622,  622,  624,  636,  608,  622,  622,  624,
      636,  625,  572,  624,  636,  138,  626,  607,  624,  636,
      625,  606,  605,  138,  604,  626,  603,  602,  623,  623,
      601,  600,  637,  599,  598,  597,  596,  595,  594,  593,

      592,  637,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  627,  582,  581,  580,  579,  578,  577,  576,  575,
      627,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   93,

       93,   93,   93,  140,  140,  574,  571,  140,  140,  140,
      140,  193,  570,  569,  193,  193,  193,  568,  193,  193,
      193,  193,  195,  195,  195,  567,  566,  195,  565,  195,
      564,  195,  198,  198,  198,  563,  562,  198,  561,  198,
      560,  198,  205,  205,  559,  558,  205,  205,  205,  205,
      223,  223,  557,  556,  555,  223,  223,  290,  290,  554,
      553,  552,  290,  290,  292,  292,  551,  550,  549,  292,
      292,  313,  548,  313,  313,  547,  544,  543,  539,  313,
      313,  313,  313,  388,  388,  388,  388,  389,  389,  389,
      389,  392,  538,  537,  392,  392,  536,  535,  392,  392,

      392,  392,  461,  534,  461,  461,  533,  532,  461,  461,
      461,  461,  462,  462,  462,  531,  530,  462,  462,  462,
      462,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  460,  460,  509,  503,  506,  505,  383,  504,  503,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  390,  460,
      460,  459,  458,  457,  454,  453,  383,  452,  448,  447,

      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  387,  386,  386,  385,  384,  383,  382,  378,
      377,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  338,  337,  336,  333,  330,  329,  328,  327,

      326,  325,  226,  324,  323,  322,  321,  320,  319,  318,
      315,  314,  309,  304,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  206,  294,  293,  191,  194,  288,  287,
      286,  285,  284,  283,  280,  279,  278,  275,  272,  271,
      270,  269,  265,  264,  263,  262,  261,  260,  257,  256,
      255,  254,  253,  252,  249,  243,  242,  241,  240,  239,
      230,  229,  228,  225,  224,  224,  222,  222,  217,  216,
      215,  214,  213,  212,  211,  208,  204,  203,  190,  189,
      188,  185,  184,  183,  182,  175,  172,  169,  141,  139,
      138,  129,  108,   92,  638,   76,   15,  638,  638,  638,

      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638
    } ;

static yyconst short int yy_chk[1058] =
    {   0,
        0,    0,    1,    2,    5,    6,    7,    5,    6,    7,
        8,    0,    0,    8,   20,   20,   20,   20,   20,   20,
        7,  635,   95,  634,    8,   95,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,   10,   11,
       18,   27,   27,   28,   32,   11,   22,   22,   22,   22,

       22,   22,   35,   39,   32,   33,   35,  223,   28,   39,
       39,   39,   18,   35,   33,   33,  223,   11,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   12,   13,   14,   34,   34,
       34,   12,   40,   40,   34,   41,   41,   13,   14,   36,
       62,   36,   36,   36,   37,   62,   37,   37,   37,   52,
       47,   46,   52,   12,   13,   14,   30,   36,  131,  131,
       61,   30,   37,   46,   36,   67,   48,   46,   46,   37,
       61,   49,  632,   36,   47,   49,   36,   48,   37,   56,

       48,   49,   58,   56,   60,   58,   51,   60,   30,   30,
       50,   30,   51,   30,   81,   81,   30,   67,   51,   50,
       50,   50,   30,   85,   85,   30,   30,   54,   30,   50,
       77,   50,  100,   77,   54,   54,   86,  159,  100,  251,
       54,   88,   88,   88,   88,   88,   88,  251,  159,   81,
      122,  122,  631,   77,  122,  122,  122,   86,   85,   90,
       90,   90,   90,   90,   90,   91,   91,   91,   91,   91,
       91,  114,  114,  114,  119,  119,  119,  120,  149,  120,
      120,  120,  121,  173,  121,  121,  121,  114,  114,  173,
      119,  119,  149,  151,  114,  120,  151,  119,  179,  630,

      121,  126,  120,  126,  126,  126,  148,  141,  141,  233,
      141,  120,  141,  148,  148,  167,  141,  141,  141,  126,
      175,  233,  179,  175,  141,  193,  126,  629,  193,  196,
      196,  167,  167,  199,  199,  126,  218,  218,  249,  249,
      218,  218,  218,  220,  220,  220,  628,  226,  193,  221,
      221,  221,  226,  273,  226,  256,  627,  256,  626,  226,
      256,  273,  289,  289,  291,  291,  221,  354,  300,  625,
      256,  354,  221,  300,  256,  305,  305,  305,  306,  306,
      306,  310,  300,  619,  313,  376,  310,  313,  310,  379,
      376,  383,  618,  310,  379,  306,  383,  392,  617,  376,

      392,  306,  447,  379,  300,  383,  449,  447,  455,  458,
      615,  449,  460,  455,  458,  460,  447,  614,  611,  500,
      449,  376,  455,  458,  500,  501,  503,  506,  507,  540,
      501,  503,  506,  507,  540,  610,  608,  607,  541,  501,
      503,  506,  507,  541,  543,  544,  545,  606,  547,  543,
      544,  545,  541,  547,  605,  604,  573,  603,  543,  544,
      545,  573,  621,  622,  623,  633,  602,  621,  622,  623,
      633,  623,  540,  624,  636,  547,  623,  601,  624,  636,
      624,  599,  595,  573,  593,  624,  592,  591,  621,  622,
      590,  585,  633,  584,  583,  581,  580,  578,  577,  576,

      575,  636,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  623,  561,  560,  559,  555,  554,  553,  551,  550,
      624,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  645,

      645,  645,  645,  646,  646,  548,  539,  646,  646,  646,
      646,  647,  538,  536,  647,  647,  647,  535,  647,  647,
      647,  647,  648,  648,  648,  534,  533,  648,  532,  648,
      531,  648,  649,  649,  649,  530,  527,  649,  526,  649,
      525,  649,  650,  650,  524,  521,  650,  650,  650,  650,
      651,  651,  520,  519,  518,  651,  651,  652,  652,  517,
      516,  515,  652,  652,  653,  653,  514,  513,  512,  653,
      653,  654,  510,  654,  654,  509,  505,  504,  496,  654,
      654,  654,  654,  655,  655,  655,  655,  656,  656,  656,
      656,  657,  494,  493,  657,  657,  492,  491,  657,  657,

      657,  657,  658,  490,  658,  658,  489,  488,  658,  658,
      658,  658,  659,  659,  659,  487,  485,  659,  659,  659,
      659,  484,  483,  482,  481,  480,  479,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  459,  457,  454,  453,  452,  451,  448,
      446,  440,  439,  438,  437,  436,  435,  434,  432,  430,
      429,  428,  427,  426,  425,  424,  423,  421,  420,  419,
      417,  416,  414,  413,  412,  411,  410,  405,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  391,  389,
      388,  387,  385,  384,  382,  381,  378,  377,  375,  374,

      373,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  356,  355,  353,  352,  350,
      349,  348,  347,  346,  343,  342,  341,  340,  339,  338,
      337,  335,  334,  333,  332,  331,  330,  329,  328,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  309,  308,  307,  304,  303,  302,  301,  299,
      298,  297,  296,  295,  294,  293,  288,  286,  283,  281,
      280,  279,  278,  277,  276,  275,  274,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  255,  254,  253,  250,  248,  247,  246,  245,

      244,  243,  242,  241,  239,  238,  237,  236,  235,  234,
      232,  231,  225,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  203,  202,  192,  191,  185,  184,
      183,  182,  181,  180,  178,  177,  176,  174,  171,  170,
      169,  168,  166,  164,  163,  162,  161,  160,  158,  157,
      156,  155,  154,  152,  150,  147,  146,  144,  143,  142,
      138,  137,  134,  130,  128,  127,  124,  123,  107,  106,
      105,  104,  103,  102,  101,   99,   92,   87,   74,   73,
       70,   66,   65,   64,   63,   59,   57,   55,   45,   44,
       42,   38,   31,   23,   15,    9,  638,  638,  638,  638,

      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
#include "php_parser_api.h"

#define ECHO

#ifdef YYSTYPE
#undef YYSTYPE
#endif

#define YYSTYPE wxString

extern YYSTYPE php_lval;
#include "php_parser.cpp.h"

bool is_func_modifier(int x);

#define LEX_RETURN(x) {\
	PHPParser.setYytext(wxString(yytext, wxConvUTF8));\
	PHPParser.setYytype(x);\
	PHPParser.setLineNumber(yylineno);\
	php_lval = wxString(yytext, wxConvUTF8);\
	return x;\
}

#define PHP 1

#define CPP_COMMENT 2

#define DOC_COMMENT 3

#define HEREDOC 4

#define DSTRING 5

#define SINGLE_STRING 6


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 639 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 997 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	BEGIN(PHP);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
	BEGIN(PHP);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	BEGIN(PHP);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	BEGIN(PHP);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{}
	YY_BREAK
case 6:
YY_RULE_SETUP
{}
	YY_BREAK
case 7:
YY_RULE_SETUP
{}
	YY_BREAK
case 8:
YY_RULE_SETUP
{}
	YY_BREAK
case 9:
YY_RULE_SETUP
{LEX_RETURN(T_VARIABLE);}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	// Keep the LABEL, we will need for later
	PHPParser.setPhpHeredocLabel(wxString(yytext, wxConvUTF8));
	BEGIN(HEREDOC);
	return T_START_HEREDOC;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{LEX_RETURN(T_DNUMBER);}
	YY_BREAK
case 12:
YY_RULE_SETUP
{LEX_RETURN(T_LNUMBER);}
	YY_BREAK
case 13:
YY_RULE_SETUP
{LEX_RETURN(T_LNUMBER);}
	YY_BREAK
case 14:
YY_RULE_SETUP
{LEX_RETURN(T_DNUMBER);}
	YY_BREAK
case 15:
YY_RULE_SETUP
{LEX_RETURN(T_DEFINE);}
	YY_BREAK
case 16:
YY_RULE_SETUP
{LEX_RETURN(T_EXIT);}
	YY_BREAK
case 17:
YY_RULE_SETUP
{LEX_RETURN(T_EXIT);}
	YY_BREAK
case 18:
YY_RULE_SETUP
{LEX_RETURN(T_FUNCTION);}
	YY_BREAK
case 19:
YY_RULE_SETUP
{LEX_RETURN(T_CONST);}
	YY_BREAK
case 20:
YY_RULE_SETUP
{LEX_RETURN(T_RETURN);}
	YY_BREAK
case 21:
YY_RULE_SETUP
{LEX_RETURN(T_TRY);}
	YY_BREAK
case 22:
YY_RULE_SETUP
{LEX_RETURN(T_CATCH);}
	YY_BREAK
case 23:
YY_RULE_SETUP
{LEX_RETURN(T_THROW);}
	YY_BREAK
case 24:
YY_RULE_SETUP
{LEX_RETURN(T_IF);}
	YY_BREAK
case 25:
YY_RULE_SETUP
{LEX_RETURN(T_ELSEIF);}
	YY_BREAK
case 26:
YY_RULE_SETUP
{LEX_RETURN(T_ENDIF);}
	YY_BREAK
case 27:
YY_RULE_SETUP
{LEX_RETURN(T_ELSE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
{LEX_RETURN(T_WHILE);}
	YY_BREAK
case 29:
YY_RULE_SETUP
{LEX_RETURN(T_ENDWHILE);}
	YY_BREAK
case 30:
YY_RULE_SETUP
{LEX_RETURN(T_DO);}
	YY_BREAK
case 31:
YY_RULE_SETUP
{LEX_RETURN(T_FOR);}
	YY_BREAK
case 32:
YY_RULE_SETUP
{LEX_RETURN(T_ENDFOR);}
	YY_BREAK
case 33:
YY_RULE_SETUP
{LEX_RETURN(T_FOREACH);}
	YY_BREAK
case 34:
YY_RULE_SETUP
{LEX_RETURN(T_ENDFOREACH);}
	YY_BREAK
case 35:
YY_RULE_SETUP
{LEX_RETURN(T_DECLARE);}
	YY_BREAK
case 36:
YY_RULE_SETUP
{LEX_RETURN(T_ENDDECLARE);}
	YY_BREAK
case 37:
YY_RULE_SETUP
{LEX_RETURN(T_INSTANCEOF);}
	YY_BREAK
case 38:
YY_RULE_SETUP
{LEX_RETURN(T_AS);}
	YY_BREAK
case 39:
YY_RULE_SETUP
{LEX_RETURN(T_SWITCH);}
	YY_BREAK
case 40:
YY_RULE_SETUP
{LEX_RETURN(T_ENDSWITCH);}
	YY_BREAK
case 41:
YY_RULE_SETUP
{LEX_RETURN(T_CASE);}
	YY_BREAK
case 42:
YY_RULE_SETUP
{LEX_RETURN(T_DEFAULT);}
	YY_BREAK
case 43:
YY_RULE_SETUP
{LEX_RETURN(T_BREAK);}
	YY_BREAK
case 44:
YY_RULE_SETUP
{LEX_RETURN(T_CONTINUE);}
	YY_BREAK
case 45:
YY_RULE_SETUP
{LEX_RETURN(T_GOTO);}
	YY_BREAK
case 46:
YY_RULE_SETUP
{LEX_RETURN(T_ECHO);}
	YY_BREAK
case 47:
YY_RULE_SETUP
{LEX_RETURN(T_PRINT);}
	YY_BREAK
case 48:
YY_RULE_SETUP
{LEX_RETURN(T_CLASS);}
	YY_BREAK
case 49:
YY_RULE_SETUP
{LEX_RETURN(T_INTERFACE);}
	YY_BREAK
case 50:
YY_RULE_SETUP
{LEX_RETURN(T_TRAIT);}
	YY_BREAK
case 51:
YY_RULE_SETUP
{LEX_RETURN(T_EXTENDS);}
	YY_BREAK
case 52:
YY_RULE_SETUP
{LEX_RETURN(T_IMPLEMENTS);}
	YY_BREAK
case 53:
YY_RULE_SETUP
{LEX_RETURN(T_OBJECT_OPERATOR);}
	YY_BREAK
case 54:
YY_RULE_SETUP
{LEX_RETURN(T_PAAMAYIM_NEKUDOTAYIM);}
	YY_BREAK
case 55:
YY_RULE_SETUP
{LEX_RETURN(T_NS_SEPARATOR);}
	YY_BREAK
case 56:
YY_RULE_SETUP
{LEX_RETURN(T_NEW);}
	YY_BREAK
case 57:
YY_RULE_SETUP
{LEX_RETURN(T_CLONE);}
	YY_BREAK
case 58:
YY_RULE_SETUP
{LEX_RETURN(T_VAR);}
	YY_BREAK
case 59:
YY_RULE_SETUP
{LEX_RETURN(T_EVAL);}
	YY_BREAK
case 60:
YY_RULE_SETUP
{LEX_RETURN(T_INCLUDE);}
	YY_BREAK
case 61:
YY_RULE_SETUP
{LEX_RETURN(T_INCLUDE_ONCE);}
	YY_BREAK
case 62:
YY_RULE_SETUP
{LEX_RETURN(T_REQUIRE);}
	YY_BREAK
case 63:
YY_RULE_SETUP
{LEX_RETURN(T_REQUIRE_ONCE);}
	YY_BREAK
case 64:
YY_RULE_SETUP
{LEX_RETURN(T_NAMESPACE);}
	YY_BREAK
case 65:
YY_RULE_SETUP
{LEX_RETURN(T_USE);}
	YY_BREAK
case 66:
YY_RULE_SETUP
{LEX_RETURN(T_INSTEADOF);}
	YY_BREAK
case 67:
YY_RULE_SETUP
{LEX_RETURN(T_GLOBAL);}
	YY_BREAK
case 68:
YY_RULE_SETUP
{LEX_RETURN(T_ISSET);}
	YY_BREAK
case 69:
YY_RULE_SETUP
{LEX_RETURN(T_EMPTY);}
	YY_BREAK
case 70:
YY_RULE_SETUP
{LEX_RETURN(T_STATIC);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{LEX_RETURN(T_ABSTRACT);}
	YY_BREAK
case 72:
YY_RULE_SETUP
{LEX_RETURN(T_ABSTRACT);}
	YY_BREAK
case 73:
YY_RULE_SETUP
{LEX_RETURN(T_FINAL);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{LEX_RETURN(T_PRIVATE);}
	YY_BREAK
case 75:
YY_RULE_SETUP
{LEX_RETURN(T_PROTECTED);}
	YY_BREAK
case 76:
YY_RULE_SETUP
{LEX_RETURN(T_PUBLIC);}
	YY_BREAK
case 77:
YY_RULE_SETUP
{LEX_RETURN(T_UNSET);}
	YY_BREAK
case 78:
YY_RULE_SETUP
{LEX_RETURN(T_DOUBLE_ARROW);}
	YY_BREAK
case 79:
YY_RULE_SETUP
{LEX_RETURN(T_LIST);}
	YY_BREAK
case 80:
YY_RULE_SETUP
{LEX_RETURN(T_ARRAY);}
	YY_BREAK
case 81:
YY_RULE_SETUP
{LEX_RETURN(T_CALLABLE);}
	YY_BREAK
case 82:
YY_RULE_SETUP
{LEX_RETURN(T_INC);}
	YY_BREAK
case 83:
YY_RULE_SETUP
{LEX_RETURN(T_DEC);}
	YY_BREAK
case 84:
YY_RULE_SETUP
{LEX_RETURN(T_IS_IDENTICAL);}
	YY_BREAK
case 85:
YY_RULE_SETUP
{LEX_RETURN(T_IS_NOT_IDENTICAL);}
	YY_BREAK
case 86:
YY_RULE_SETUP
{LEX_RETURN(T_IS_EQUAL);}
	YY_BREAK
case 87:
YY_RULE_SETUP
{LEX_RETURN(T_IS_NOT_EQUAL);}
	YY_BREAK
case 88:
YY_RULE_SETUP
{LEX_RETURN(T_IS_SMALLER_OR_EQUAL);}
	YY_BREAK
case 89:
YY_RULE_SETUP
{LEX_RETURN(T_IS_GREATER_OR_EQUAL);}
	YY_BREAK
case 90:
YY_RULE_SETUP
{LEX_RETURN(T_PLUS_EQUAL);}
	YY_BREAK
case 91:
YY_RULE_SETUP
{LEX_RETURN(T_MINUS_EQUAL);}
	YY_BREAK
case 92:
YY_RULE_SETUP
{LEX_RETURN(T_MUL_EQUAL);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{LEX_RETURN(T_DIV_EQUAL);}
	YY_BREAK
case 94:
YY_RULE_SETUP
{LEX_RETURN(T_CONCAT_EQUAL);}
	YY_BREAK
case 95:
YY_RULE_SETUP
{LEX_RETURN(T_MOD_EQUAL);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{LEX_RETURN(T_SL_EQUAL);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{LEX_RETURN(T_SR_EQUAL);}
	YY_BREAK
case 98:
YY_RULE_SETUP
{LEX_RETURN(T_AND_EQUAL);}
	YY_BREAK
case 99:
YY_RULE_SETUP
{LEX_RETURN(T_OR_EQUAL);}
	YY_BREAK
case 100:
YY_RULE_SETUP
{LEX_RETURN(T_XOR_EQUAL);}
	YY_BREAK
case 101:
YY_RULE_SETUP
{LEX_RETURN(T_BOOLEAN_OR);}
	YY_BREAK
case 102:
YY_RULE_SETUP
{LEX_RETURN(T_BOOLEAN_AND);}
	YY_BREAK
case 103:
YY_RULE_SETUP
{LEX_RETURN(T_LOGICAL_OR);}
	YY_BREAK
case 104:
YY_RULE_SETUP
{LEX_RETURN(T_LOGICAL_AND);}
	YY_BREAK
case 105:
YY_RULE_SETUP
{LEX_RETURN(T_LOGICAL_XOR);}
	YY_BREAK
case 106:
YY_RULE_SETUP
{LEX_RETURN(T_SL);}
	YY_BREAK
case 107:
YY_RULE_SETUP
{LEX_RETURN(T_SR);}
	YY_BREAK
case 108:
YY_RULE_SETUP
{LEX_RETURN(T_CLASS_C);}
	YY_BREAK
case 109:
YY_RULE_SETUP
{LEX_RETURN(T_TRAIT_C);}
	YY_BREAK
case 110:
YY_RULE_SETUP
{LEX_RETURN(T_FUNC_C);}
	YY_BREAK
case 111:
YY_RULE_SETUP
{LEX_RETURN(T_METHOD_C);}
	YY_BREAK
case 112:
YY_RULE_SETUP
{LEX_RETURN(T_LINE);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{LEX_RETURN(T_FILE);}
	YY_BREAK
case 114:
YY_RULE_SETUP
{LEX_RETURN(T_DIR);}
	YY_BREAK
case 115:
YY_RULE_SETUP
{LEX_RETURN(T_NS_C);}
	YY_BREAK
case 116:
YY_RULE_SETUP
{LEX_RETURN(T_YIELD);}
	YY_BREAK
case 117:
YY_RULE_SETUP
{
	LEX_RETURN(T_INT_CAST);
}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
	LEX_RETURN(T_DOUBLE_CAST);
}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
	LEX_RETURN(T_STRING_CAST);
}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
	LEX_RETURN(T_ARRAY_CAST);
}
	YY_BREAK
case 121:
YY_RULE_SETUP
{
	LEX_RETURN(T_OBJECT_CAST);
}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
	return T_BOOL_CAST;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
	return T_UNSET_CAST;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
{BEGIN(CPP_COMMENT);}
	YY_BREAK
case 125:
YY_RULE_SETUP
{
	BEGIN(DOC_COMMENT);
	PHPParser.clearDocComment();
}
	YY_BREAK
case 126:
YY_RULE_SETUP
{LEX_RETURN(T_STRING);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
	return T_CLOSE_TAG;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
{BEGIN(SINGLE_STRING); php_lval = wxT("'");}
	YY_BREAK
case 130:
YY_RULE_SETUP
{BEGIN(DSTRING); php_lval = wxT("\""); }
	YY_BREAK
case YY_STATE_EOF(PHP):
{
	PHPParser.setYytext(wxT(""));
	PHPParser.setYytype(0);
	PHPParser.setLineNumber(php_lineno);
	php_lval = wxString(yytext, wxConvUTF8);\
	yyterminate();
	return 0;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
{LEX_RETURN(yytext[0]);}
	YY_BREAK
case 132:
YY_RULE_SETUP
{}
	YY_BREAK
case 133:
YY_RULE_SETUP
{php_lval << wxString(yytext, wxConvUTF8);}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
	BEGIN(PHP);
	php_lval << wxT("'");
	PHPParser.setYytext(php_lval);
	PHPParser.setYytype(T_CONSTANT_ENCAPSED_STRING);
	PHPParser.setLineNumber(yylineno);
	return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
{}
	YY_BREAK
case 136:
YY_RULE_SETUP
{}
	YY_BREAK
case 137:
YY_RULE_SETUP
{php_lval << wxString(yytext, wxConvUTF8);}
	YY_BREAK
case 138:
YY_RULE_SETUP
{
	BEGIN(PHP);
	php_lval << wxT("\"");
	PHPParser.setYytext(php_lval);
	PHPParser.setYytype(T_CONSTANT_ENCAPSED_STRING);
	PHPParser.setLineNumber(yylineno);
	return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
{}
	YY_BREAK
case 140:
YY_RULE_SETUP
{
	wxString label(yytext, wxConvUTF8);
	label.RemoveLast();
	int sizeToReturn = label.Len();
	label.Trim().Trim(false);
	if(label == PHPParser.getPhpHeredocLabel()) {
		yyless(sizeToReturn); // put back the ';'
		BEGIN(PHP);
		return T_END_HEREDOC;

	} else {
		// do nothing
	}
}
	YY_BREAK
case 141:
YY_RULE_SETUP
{}
	YY_BREAK
case 142:
YY_RULE_SETUP
{}
	YY_BREAK
case 143:
YY_RULE_SETUP
{BEGIN(PHP);}
	YY_BREAK
case 144:
YY_RULE_SETUP
{}
	YY_BREAK
case 145:
YY_RULE_SETUP
{
	PHPParser.setDocCommentLine(php_lineno);
	BEGIN(PHP);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
{PHPParser.appendDocComment(wxT("\n"));}
	YY_BREAK
case 147:
YY_RULE_SETUP
{
	PHPParser.appendDocComment(yytext[0]);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CPP_COMMENT):
			case YY_STATE_EOF(DOC_COMMENT):
			case YY_STATE_EOF(HEREDOC):
			case YY_STATE_EOF(DSTRING):
			case YY_STATE_EOF(SINGLE_STRING):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 639 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 639 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 638);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


extern int php_parse();

int php_wrap(){return 1;}

int PHP_Scan( const wxString &filePath)
{
	BEGIN INITIAL;
	php_lineno = 1;
	FILE* fp = fopen(filePath.To8BitData(), "rb");
	if ( fp == NULL ) {
		//printf("%s\n", strerror(errno));
		// failed to open input file...
		return -1;
	}

	yy_switch_to_buffer( yy_create_buffer(fp, YY_BUF_SIZE) );
	int rc = php_parse();

    if ( YY_CURRENT_BUFFER->yy_input_file ) {
        fclose( YY_CURRENT_BUFFER->yy_input_file );
        YY_CURRENT_BUFFER->yy_input_file = NULL;

    }

    yy_delete_buffer    ( YY_CURRENT_BUFFER    );
    yyterminate();
	return rc;
}

int PHP_Lex( const wxString &filePath)
{
	BEGIN INITIAL;
	php_lineno = 1;
	FILE* fp = fopen(filePath.To8BitData(), "rb");
	if ( fp == NULL ) {
		return -1;
	}

	yy_switch_to_buffer( yy_create_buffer(fp, YY_BUF_SIZE) );
	php_in = fp;
	int type = 0;
	while( true ) {
		type = php_lex();
		if(type == 0) break;
	}

    if ( YY_CURRENT_BUFFER->yy_input_file ) {
        fclose( YY_CURRENT_BUFFER->yy_input_file );
        YY_CURRENT_BUFFER->yy_input_file = NULL;

    }

    yy_delete_buffer    ( YY_CURRENT_BUFFER    );
	return type;
}

int PHP_ScanString( const wxString &inputString )
{
	BEGIN INITIAL;
	yy_scan_string( inputString.To8BitData() );
	php_lineno = 1;

	int rc = php_parse();

    yyterminate();
	return rc;
}

void php_error(char* st)
{
}

void php_less(int count){
	yyless(count);
}

bool is_func_modifier(int x) {
	switch(x){
	case T_PUBLIC   :
	case T_PROTECTED:
	case T_PRIVATE  :
	case T_STATIC   :
	case T_ABSTRACT :
	case T_FINAL:
	case T_FUNCTION:
		return true;
	default:
		return false;
	}
}
